#!/bin/bash

show_help()
{
  cat <<EOF

$ExecName

Usage:
  $ExecName [options] <playbook_folder>

test Data Store playbooks

Parameters:
  <playbook_folder>  the path to the root directory for a collection of
                     playbooks

Options:
$(printHelpText)

Summary:
This script runs a playbook with in the testing environment. If no inventory
hosts file is provided, it will use 'hosts-all'. If no playbook is provided, no
playbook will be run. When combined with -i, this allows the environment to be 
started in interactive mode.
EOF
}


printHelpText(){
  if [[ "$OSTYPE" == "darwin"* ]]
  then
    cat <<EOF
  -I <hosts>      the name of the inventory hosts file to use
  -P <playbook>   the path to the playbook to test relative to <playbook_folder>.

  -h              show help and exit
  -i              after running the playbook, open shell that allows manual
                  inspection of the configuration files, vaults, and logs
  -p              more information will be output and newlines will be expanded
                  in that output.
EOF
  else
    cat <<EOF
  -I, --inventory-hosts <hosts>  the name of the inventory hosts file to use
  -P, --playbook  <playbook>     the path to the playbook to test relative to
                                       <playbook_folder>.

  -h, --help                     show help and exit
  -i, --inspect                  after running the playbook, open shell that
                                 allows manual inspection of the configuration
                                 files, vaults, and logs
  -p, --pretty                   more information will be output and newlines
                                 will be expanded in that output.
EOF
  fi

}


set -e

if [[ "$OSTYPE" == "darwin"* ]]
then
  readonly ExecName=$(greadlink -f "$0")
else
  readonly ExecName=$(readlink --canonicalize "$0")
fi

readonly BaseDir=$(dirname "$ExecName")
readonly Cfg="$BaseDir"/config.inc
readonly DefaultHosts=hosts-all

# shellcheck disable=SC1090
source "$Cfg"


main()
{
  local doInspect=false
  local hosts="$DefaultHosts"
  local pretty=false

  local opts
  opts=$(parse_cmd_line "$@")
  eval set -- "$opts"

  while true
  do
    case "$1" in
      -h|--help)
        show_help
        exit 0
        ;;
      -I|--inventory-hosts)
        hosts="$2"
        shift 2
        ;;
      -i|--inspect)
        doInspect=true
        shift
        ;;
      -P|--playbook)
        local playbookInput="$2"
        shift 2
        ;;
      -p|--pretty)
        pretty=true
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        exit_with_help
        ;;
    esac
  done

  if [ "$#" -lt 1 ]
  then
    exit_with_help
  fi

  local playbooks
  playbooks=$(resolve_playbook_dir "$1")

  local playbook
  if [[ -n "${playbookInput-}" ]]
  then
    playbook="$(resolve_playbook "$playbooks" "$playbookInput")"
  fi

  do_run "$doInspect" "$pretty" "$playbooks" "$hosts" "${playbook-}"
}


do_run()
{
  local doInspect="$1"
  local pretty="$2"
  local playbooks="$3"
  local hosts="$4"
  local playbook="$5"

  if "$BaseDir"/env/controller "$Cfg" start
  then
    "$BaseDir"/ansible-tester/run "$doInspect" "$pretty" '' "$playbooks" "$hosts" "$playbook"
  fi

  "$BaseDir"/env/controller "$Cfg" stop
}


exit_with_help()
{
  show_help >&2
  exit 1
}


parse_cmd_line()
{
  local opts
  if [[ "$OSTYPE" == "darwin"* ]]
  then
    #shellcheck disable=SC2048,SC2086
    opts=$(getopt hiI:P:p $*)
  else
    opts=$(getopt --longoptions help,inspect,inventory-hosts:,playbook:,pretty \
                  --options hiI:P:p \
                  --name "$ExecName" \
                  -- \
                  "$@")
  fi

  local ret="$?"

  if [ "$ret" -ne 0 ]
  then
    exit_with_help
  fi

  printf '%s' "$opts"
}


resolve_playbook()
{
  local playbooks="$1"
  local playbook="$2"

  if [[ "$playbook" != *.* ]]
  then
    playbook="$playbook".yml
  fi

  if ! [ -f "$playbooks"/"$playbook" ]
  then
    printf 'The playbook %s/%s does not exist\n' "$playbooks" "$playbook" >&2
    exit 1
  fi

  printf '%s' "$playbook"
}


resolve_playbook_dir()
{
  local playbooks="$1"

  if ! [[ "$playbooks" =~ ^/ ]]
  then
    playbooks="$(pwd)"/"$playbooks"
  fi

  if ! [ -d "$playbooks" ]
  then
    printf '%s is not a directory\n' "$playbooks" >&2
    exit 1
  fi

  printf '%s' "$playbooks"
}


main "$@"
