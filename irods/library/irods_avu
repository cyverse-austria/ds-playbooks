#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright: (c) 2020, The Arizona Board of Regents
# Standard BSD License | CyVerse (see https://cyverse.org/license)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community"
}

DOCUMENTATION = r'''
---
module: irods_avu

short_description: Manage iRODS AVU

description: >
  This module manipulates AVUs in iRODS. An AVU of a data object or resource
  can be added, set, or removed. Both "add" and "set" create a new AVU if it
  doesn't exist. However, if the entity has an AVU with the same attribute, an
  "add" will create a new AVU, while a "set" will update the existing one.

version_added: '2.9.10'

author: Tony Edgin (@tedgin)

options:
  attribute:
    description: This is the name of the attribute.
    required: true
    type: str

  value:
    description: This is the value of the attribute.
    required: true
    type: str

  units:
    description: This is the units of the value.
    default: null
    type: str

  entity_name:
    description: >
      The AVU will be attached or reomved to this entity. If it is a data
      object, this should be its absolute path.
    required: true
    type: str

  entity_type:
    description: This is the type the entity.
    default: data object
    choices:
      - data object
      - resource

  state:
    description: >
      This is the desired state to achieve. "set" means a single AVU is
      attached with this attribute. "present" means that the AVU will be
      attached if there isn't already an AVU with the same attribute and
      value. Any others will be removed. "absent" means that an AVU with
      the provided attribute and value will be removed.

    default: present
    choices:
      - absent
      - present
      - set

  host:
    description: This is the FQDN or IP address of the IES.
    default: localhost.localdomain
    type: str

  port:
    description: This is the TCP port to connect to.
    default: 1247
    type: int

  zone:
    description: This is the local zone served by the IES.
    required: true
    type: str

  admin_user:
    description: This is the iRODS account used when connecting.
    default: rods
    type: str

  admin_password:
    description: This is the password used to authenticate the iRODS account.
    required: true
    type: str

notes:
  - >
    In the future, it will be able to set an AVU on a collection, data object
    and user.
  - In the future, it will be able to add, remove, modify, and copy AVUs.

requirements::
  - python-irodsclient>=0.8.2
'''

EXAMPLES = r'''
---
- name: ensure a data object has a unitless AVU
  irods_avu:
    attribute: a
    value: v
    entity_name: /tempZone/home/user/file
    zone: tempZone
    admin_password: rods

- name: ensure a resource of a remote IES does not have an AVU
  irods_avu:
    attribute: a
    value: v
    units: u
    state: absent
    entity_type: resource
    entity_name: demoResc
    host: ies.localdomain
    zone: tempZone
    admin_password: rods

- name: ensure a data object on an IES listening on a custom port has an AVU
  irods_avu:
    attribute: a
    value: v
    units: u
    state: set
    entity_name: /tempZone/home/user/file
    port: 1250
    zone: tempZone
    admin_password: rods

- name: ensure a dato object has an AVU connecting as a specific user
  irods_avu:
    attribute: a
    value: v
    units: u
    entity_name: /tempZone/home/user/file
    zone: tempZone
    admin_user: user
    admin_password: password
'''

RETURN = ''' # '''


import ssl
from ssl import Purpose
from typing import Optional

from ansible.module_utils.basic import AnsibleModule

try:
    from irods.meta import iRODSMeta
    from irods.session import iRODSSession

    _IRODSCLIENT_PACK_ERR = None
except Exception as e:
    _IRODSCLIENT_PACK_ERR = e


def _irods_session(
    host: str, port: int, zone: str, user: str, password: str
) -> iRODSSession:
    return iRODSSession(
        host, port, zone, user, password,
        ssl_context=ssl.create_default_context(Purpose.SERVER_AUTH))


def _irods_avu(
    attribute: str,
    value: str,
    units: Optional[str],
    entity_name: str,
    entity_type: str,
    state: str,
    host: str,
    port: int,
    zone: str,
    admin_user: str,
    admin_password: str
) -> bool:
    with _irods_session(host, port, zone, admin_user, admin_password)
    as session:
        if entity_type == "resource":
            entity = session.resources.get(entity_name)
        else:
            entity = session.data_objects.get(entity_name)

        avus = entity.metadata().get_all(attribute)
        if state == "present":
            if len(avus) == 1:
                if avus[0].value == value and avus[0].units == units:
                    return False
            new_avu = iRODSMeta(attribute, value, units)
            entity.metadata[new_avu.name] = new_avu
            return True
        else:
            for avu in avus:
                if avu.value == value and avu.units == units:
                    entity.metadata.remove(attribute, value, units)
                    return True
            return False


def _prep_module() -> AnsibleModule:
    options_spec = dict(
        attribute=dict(type='str', required=True),
        value=dict(type='str', required=True),
        units=dict(type='str', default=None),
        entity_name=dict(type='str', required=True),
        entity_type=dict(
            type='str',
            choices=["data object", "resource"],
            default="data object"),
        state=dict(type='str', choices=["absent", "set"], default="set"),
        host=dict(type='str', default="localhost.localdomain"),
        port=dict(type='int', default=1247),
        zone=dict(type='str', required=True),
        admin_user=dict(type='str', default="rods"),
        admin_password=dict(type='str', required=True))

    return AnsibleModule(argument_spec=options_spec)


def main() -> None:
    """Entrypoint of module."""
    module = _prep_module()

    if _IRODSCLIENT_PACK_ERR:
        err_msg = "python-irodsclient issue: %s" % (str(_IRODSCLIENT_PACK_ERR))
        module.fail_json(msg=err_msg)
        return

    result = dict(changed=False)

    try:
        result['changed'] = _irods_avu(**module.params)
        module.exit_json(**result)
    except Exception as e:
        module.fail_json(msg=str(e))


if __name__ == '__main__':
    main()
