#!/usr/bin/python

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community"
}

DOCUMENTATION = """
---
module: irods_group_member

short_description: Add/Remove user from iRODS group

version_added: "2.4"

description:
    - "Add/Remove user from iRODS group, group must be present"

options:
    group:
        description:
            - Name of the iRODS group
            - Group must already be present
        required: true
    users:
        description:
            - Username of user
        required: true
    state:
        description:
            - Desired state to achieve
            - Either present or absent
        required: true
    host:
        description:
            - Hostname of the iRODS server
        required: true
    port:
        description:
            - Port of the iRODS server
        required: true
    admin_user:
        description:
            - Username of the admin user
        required: true
    admin_password:
        description:
            - Password of the admin user
        required: true
    zone:
        description:
            - Zone of the admin user
        required: true

author:
    - John Xu
"""

EXAMPLES = """
# Ensure the user is present in the group (group must already exist)
- name: Add user to group
  irods_group_member:
    group: some_irods_group
    users:
        - one_user
    state: present
    host: cyverse.org
    port: 1247
    admin_user: rods
    admin_password: 1234
    zone: tempZone

# Ensure the user is absent from the group (group must already exist)
- name: Remove user to group
  irods_group_member:
    group: some_irods_group
    users:
        - one_user
    state: absent
    host: cyverse.org
    port: 1247
    admin_user: rods
    admin_password: 1234
    zone: tempZone
"""

RETURN = """
message:
    description: Performed operation
    type: str
    returned: always
users:
    description: users changed by the task
    type: str
    returned: when users param is specified
"""

from ansible.module_utils.basic import AnsibleModule
from subprocess import Popen, PIPE
import os
import ssl

try:
    USE_IRODS_CLIENT = True
    from irods.session import iRODSSession
    from irods.models import User, UserGroup
except ImportError:
    USE_IRODS_CLIENT = False


class IRODSGroupModule:
    def __init__(self):

        # define argument
        self.module_args = dict(
            group=dict(type="str", required=True),
            users=dict(type="list", elements="str", required=True),
            state=dict(type="str", required=True,
                choices=["present", "absent"]),

            host=dict(type="str", required=True),
            port=dict(type="int", required=True),
            admin_user=dict(type="str", no_log=True, required=True),
            admin_password=dict(type="str", no_log=True, required=True),
            zone=dict(type="str", required=True),
        )
        # result
        self.result = dict(
            changed=False,
            message="",
            group=""
        )

        # init module
        self.module = AnsibleModule(
            argument_spec=self.module_args,
            supports_check_mode=True
        )

        self.session = None

    def run(self):
        """
        entry point for module
        """

        # check param and env
        self.sanity_check()

        # only-check mode
        if self.module.check_mode:
            return self.result

        self.init_session()

        action = self.select_action()
        action()

    def _fail(self, msg, err=None):

        if self.session:
            self.session.cleanup

        if err:
            self.module.fail_json(msg=msg + "\n" + str(err), **self.result)
        else:
            self.module.fail_json(msg=msg, **self.result)

    def _success(self, msg=""):
        if msg:
            self.result["message"] = msg
        self.module.exit_json(**self.result)

    def sanity_check(self):
        # python-irodsclient is required at this point
        if not USE_IRODS_CLIENT:
            self._fail("python-irodsclient not installed")

    def init_session(self):
        ssl_context = ssl.create_default_context(purpose=ssl.Purpose.SERVER_AUTH, cafile=None, capath=None, cadata=None)
        ssl_settings = {"ssl_context": ssl_context}
        self.session = iRODSSession(
            host=self.module.params["host"],
            port=self.module.params["port"],
            user=self.module.params["admin_user"],
            password=self.module.params["admin_password"],
            zone=self.module.params["zone"],
            **ssl_settings)

    def select_action(self):
        """
        dispatch action according to the argument passed to the module
        """
        if self.module.params["state"] == "present":
            return self.member_present
        else:
            return self.member_absent

    def member_present(self):
        group_name = self.module.params["group"]
        users = set(self.module.params["users"])
        self.result["users"] = []

        # group must already exist
        if not self._group_exist(group_name):
            self._fail("Group must already exist")

        # check if users are in the group
        users = [username for username in users if not self._is_user_in_group(group_name, username) ]

        # if all users present
        if not users:
            self._success()

        # add users
        for username in users:
            self._add_user_to_group(group_name, username)
            self.result["users"].append(username)

        users_remain_absent = [ username for username in users if not self._is_user_in_group(group_name, username) ]
        if not users_remain_absent:
            self.result["users"] = list(users)
            self._success("All specified user(s) are added to the group")
        else:
            self.result["users"] = users_remain_absent
            self._fail("Specified user(s) not in group after adding")

    def member_absent(self):
        group_name = self.module.params["group"]
        users = set(self.module.params["users"])
        self.result["users"] = []

        # group must already exist
        if not self._group_exist(group_name):
            self._fail("Group must already exist")

        # check if users are in the group
        users = set([username for username in users if self._is_user_in_group(group_name, username) ])

        # if all users absent
        if not users:
            self._success()

        # remove users from group
        for username in users:
            self._remove_user_from_group(group_name, username)
            self.result["users"].append(username)

        users_still_exist = [ username for username in users if self._is_user_in_group(group_name, username) ]
        if not users_still_exist:
            self.result["users"] = list(users)
            self._success("All specified user(s) are removed from the group")
        else:
            self.result["users"] = users_still_exist
            self._fail("Specified user(s) remain in group after removal")

    def _add_user_to_group(self, group_name, username):
        try:
            self.session.user_groups.addmember(group_name, username)
            self.result["changed"] = True
        except Exception as e:
            self._fail("Unable to add user {} to irods group {}".format(username, group_name), e)

    def _remove_user_from_group(self, group_name, username):
        try:
            self.session.user_groups.removemember(group_name, username)
            self.result["changed"] = True
        except Exception as e:
            self._fail("Unable to remove user {} from irods group {}".format(username, group_name), e)

    def _is_user_in_group(self, group_name, username):
        try:
            query = self.session.query(User.name, UserGroup.name)

            for result in query:
                if group_name == result[UserGroup.name] and username == result[User.name]:
                    return True
            return False
        except Exception as e:
            self._fail("Unable to query user memebership in irods group {}".format(group_name), e)

    def _group_exist(self, group_name):
        try:
            query = self.session.query(UserGroup.name)

            for result in query:
                if group_name == result[UserGroup.name]:
                    return True
            return False
        except Exception as e:
            self._fail("Unable to query irods group {}".format(group_name), e)

def main():
    module = IRODSGroupModule()
    module.run()

if __name__ == "__main__":
    main()