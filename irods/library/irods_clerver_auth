#!/bin/bash
#
# An ansible module for initializing the clerver connection to the catalog 
# service PROVIDERs.
#
# Module Name:
#  irods_clerver_auth
#
# Required Variables:
#  PASSWORD  the PASSWORD used by the clerver to connect
#
# Optional Variables:
#  PROVIDER  The FQDN of the iRODS server. If this isn't provided, it assumes 
#            the local host is the server.

main()
{
  local VARFILE="$1"

  local PASSWORD
  local IRODS_HOST
  local IRODS_PORT
  local IRODS_USER_NAME
  local IRODS_ZONE_NAME
  . "${VARFILE}"
  local TIME_OUT=20

  require PASSWORD IRODS_HOST IRODS_PORT IRODS_USER_NAME IRODS_ZONE_NAME
  export PASSWORD IRODS_HOST IRODS_PORT IRODS_USER_NAME IRODS_ZONE_NAME

  local AUTHFILE
  AUTHFILE=$(timeout ${TIME_OUT} iinit -l | sed --quiet 's/^NOTICE: irods_authentication_file - //p')

  if [ -z "${AUTHFILE}" ]
  then
    AUTHFILE="${HOME}"/.irods/.irodsA
  fi

  if [ -e "${AUTHFILE}" ]
  then
    succeed false
  fi

  local errMsg
  if ! errMsg=$(echo ${PASSWORD} | timeout ${TIME_OUT} iinit "$PASSWORD" 2>&1)
  then
    fail "$errMsg"
  fi

  succeed true
}

require()
{
  local VARS="${@}"
  for VAR in ${VARS}; do
    if [ -z "${!VAR}" ]
    then
      fail "variable '${VAR}' must be defined"
    fi
  done
}

fail()
{
  local msg="$*"

  # shellcheck disable=SC2016
  stderr="$(cat ${stderrfile})"
  stdout="$(cat ${stdoutfile})"
  exec 1>&3
  jq --compact-output --monochrome-output --null-input --arg msg "$msg" \
    --arg stderr "${stderr}" \
    --arg stdout "${stdout}" \
    '$ARGS.named'
    # >&2
     # '{failed: true, msg: $msg}' \

  exec 2>&4
  exit 1
}


succeed()
{
  local changed="$1"

  stderr="$(cat ${stderrfile})"
  stdout="$(cat ${stdoutfile})"
  # shellcheck disable=SC2016
  exec 1>&3
  jq --compact-output --monochrome-output --null-input --arg changed "$changed" \
    --arg stderr "${stderr}" \
    --arg stdout "${stdout}" \
    '$ARGS.named'
    # >&2
     # '{changed: ($changed == "true")}' \

  exec 2>&4
  exit 0
}


set -e
changed="false"
rc=0
stdout=""
stderr=""
msg=""
stderrfile="/tmp/stderr"
stdoutfile="/tmp/stdout"
trap 'exec 1>&3 2>&4' 0 1 2 3
exec 3>&1 4>&2
exec 1>${stdoutfile}
exec 2>${stderrfile}
# trap 'rm -f ${tmpfstderr}' 0 1 2 3
# main "$@" 2>&1
main "$@"
