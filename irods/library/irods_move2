#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from ansible.module_utils.basic import AnsibleModule
import os
import shutil
from os import path
import ssl
from irods.session import iRODSSession
from irods.resource import iRODSResource
from irods.collection import iRODSCollection
from irods.data_object import iRODSDataObject
from irods.models import Resource,Collection,DataObject
import irods.keywords as kw

from home.irods_conversion.repl_and_trim import repl_and_trim

DOCUMENTATION = r'''
---
module: irods_move

short_description: Rename data collection/object

# If this is part of a collection, you need to use semantic versioning,
# i.e. the version is of the form "2.5.0" and not "2.4".
version_added: "1.0.0"

description: An ansible module for renaming a data object or collection. To ensure
idempotency, if the source doesn't exist, but the destination does, it is
assumed that the move already happened and the module succeeds.

options:
    source:
        description: the current absolute path to the collection or data object
        type: str
    destination:
        description: the new absolute path to the collection or data object
        type: str

# Specify this value according to your collection
# in format of namespace.collection.doc_fragment_name
extends_documentation_fragment:
    - my_namespace.my_collection.my_doc_fragment_name

author:
    - Fenn Garnett (@Fennersteel)
'''

EXAMPLES = r'''

'''

RETURN = r'''

'''

try:
    USE_IRODS_CLIENT = True
    from irods.session import iRODSSession
    from irods.models import DataObject, DataAccess, User
    from irods.models import Collection, CollectionAccess, CollectionUser
    from irods.access import iRODSAccess
    from irods.exception import DataObjectDoesNotExist
    from irods.column import Criterion
except ImportError:
    USE_IRODS_CLIENT = False

try:
     env_file = os.environ['IRODS_ENVIRONMENT_FILE']
except KeyError:
     env_file = os.path.expanduser('~/.irods/irods_environment.json')

ssl_context = ssl.create_default_context(purpose=ssl.Purpose.SERVER_AUTH, cafile=None, capath=None, cadata=None)
ssl_settings = {'ssl_context': ssl_context}

class IRODSMoveModule:
    """
    Module class
    """

    def __init__(self):
        """
        Initialize module
        """

        self.module_args = dict(
            source=dict(type="str", required=True),
            destination=dict(type="str", required=True)
        )

        self.result = dict(
            changed=False,
            source='',
            destination=''
        )

        self.module = AnsibleModule(
            argument_spec=self.module_args,
            supports_check_mode=True
        )

    def init_session(self):
        """
        Initialize the iRODS session with iRODS server
        """
        ssl_context = ssl.create_default_context(
            purpose=ssl.Purpose.SERVER_AUTH, cafile=None, capath=None,
            cadata=None)
        ssl_settings = {"ssl_context": ssl_context}
        self.session = iRODSSession(
            source=self.module.params["source"],
            destination=self.module.params["destination"],
            **ssl_settings)

    def run_module(self):
        if self.module.check_mode:
            self.module.exit_json(**self.result)

        self.init_session()

        self.repl_and_trim()

    def repl_and_trim(self):
        source = self.module.params['source']
        destination = self.module.params['destination']
        q = self.session.query(Resource).filter(Resource.name == destination)
        srcResc = iRODSResource(self.session.resources, q.one())

        # loop over data objects found on srcResc
        for q_row in self.session.query(Collection,DataObject) \
                            .filter(DataObject.resc_id == srcResc.id):
            collection =  iRODSCollection (self.session.collections, result = q_row)
            data_object = iRODSDataObject (self.session.data_objects, parent = collection, results = (q_row,))

            if destination:
                data_object.replicate(destination)
                for replica_number in [r.number for r in data_object.replicas]:
                    options = { kw.DATA_REPL_KW: replica_number }
                    data_object.unlink( **options )

def main():
    """
    Entrypoint of the Ansible module
    """
    module = IRODSMoveModule()
    module.run_module()


if __name__ == '__main__':
    main()