#!/usr/bin/python
#
# An ansible module for executing irodsctl, i.e., controling the state of an
# iRODS server.
#
# Module Name:
#  irods_ctl
#
# Optional Variables:
#  state  The state irods-server should be in upon success. It should be one of
#         'restarted', 'started', or 'stopped'. The default is 'started'.

from os import popen

from ansible.module_utils.basic import AnsibleModule


_irodsctl = "/var/lib/irods/iRODS/irodsctl"


def _call_irodsctl(arg):
  return popen(_irodsctl + " " + arg).read()


def _is_running():
  return "No servers running" not in _call_irodsctl("status")


def _ensure_started():
  if not _is_running():
    _call_irodsctl("start")
    return True
  else:
    return False


def _ensure_stopped():
  if _is_running():
    _call_irodsctl("stop")
    return True
  else:
    return False


def _restart():
  response = _call_irodsctl("restart")

  # NB: irodsctl restart succeeds even when it fails to start the server, so we
  #     need to check to see if iRODS is running
  if not _is_running():
    raise Exception(response)

  return True


def _ensure_state(state):
  return { 'restarted' : _restart,
           'started'   : _ensure_started,
           'stopped'   : _ensure_stopped,
         }[state]()


def main():
  module = AnsibleModule(
    argument_spec = dict(
      state = dict(type='str', choices=["restarted","started","stopped"], default="started")))

  try:
    module.exit_json(params=module.params, changed=_ensure_state(module.params['state']))
  except Exception as e:
    module.fail_json(msg=str(e))


if __name__ == '__main__':
  main()
