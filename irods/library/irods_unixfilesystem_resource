#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Provide irods_unixfilesystem_resource Ansible module"""

import ssl
from ansible.module_utils.basic import AnsibleModule
from irods.session import iRODSSession
from irods.exception import ResourceDoesNotExist


DOCUMENTATION = r'''
---
module: irods_unixfilesystem_resource

short_description: Create an iRODS Unix filesystem storage resource

version added: "2.11.11"

description: >
  An ansible module for creating an iRODS Unix filesystem storage resource

options:
  name:
    description: the name of the resource
    required: true
    type: string
  location:
    description: >
      the identity of the resource server that will host this resource
    required: true
    type: str
  vault:
    description: the absolute path to the root directory of the vault
    required: true
    type: path
  context:
    description: any context to attach to this resource
    required: false
    type: str
  status:
    description: starting status 'up' or 'down'
    required: false
    type: str
  free_space:
    description: the current amount of free space in bytes 
    required: false
    type: int
  host:
    description: the FQN or IP address of the iRODS server to connect to
    required: false
    default: the value of `location` will be used
    type: str
  port:
    description: port of the iRODS server
    required: true
    type: int
  admin_user:
    description: username of the admin user
    required: true
    type: str
  admin_password:
    description: password of the admin user
    required: true
    type: str
  zone:
    description: zone of the admin user
      required: true
      type: str

author: Fenn Garnett (@Fennersteel)
'''


class IRODSUnixResourceModule:
    """
    Module class
    """

    def __init__(self):
        """
        Initialize the module
        """
        # define argument
        self.module_args = dict(
            name=dict(type="str", required=True),
            location=dict(type="str", required=True),
            vault=dict(type="path", required=True),
            context=dict(type="str", required=False),
            status=dict(type="str", required=False),
            free_space=dict(type="int", required=False),
            host=dict(type='str', required=False),
            port=dict(type="int", required=True),
            admin_user=dict(type="str", no_log=True, required=True),
            admin_password=dict(type="str", no_log=True, required=True),
            zone=dict(type="str", required=True),
        )
        # result
        self.result = dict(
            changed=False,
            response="",
            exc="",
            exc_msg=""
        )
        self.failed = False
        # init module
        self.module = AnsibleModule(
            argument_spec=self.module_args,
            supports_check_mode=True
        )
        if not self.module.params["host"]:
            self.module.params["host"] = self.module.params["location"]
        self.ssl_context = ssl.create_default_context(
            purpose=ssl.Purpose.SERVER_AUTH, cafile=None, capath=None,
            cadata=None)
        self.ssl_settings = {"ssl_context": self.ssl_context}
        self.session = None

    def _init_session(self):
        try:
            self.session = iRODSSession(
                host=self.module.params["host"],
                port=self.module.params["port"],
                user=self.module.params["admin_user"],
                password=self.module.params["admin_password"],
                zone=self.module.params["zone"],
                **self.ssl_settings
            )
        except Exception as exc:  # pylint: disable=broad-except
            self.result["exc"] = exc
            self.result["exc_message"] = "Unable to connect to iRODS."
            self._fail(self.result["exc_message"])

    def run_module(self):
        """
        Main module operative function
        """
        if self.module.check_mode:
            self.module.exit_json(**self.result)

        try:
            self._init_session()
            self._create_unix_resource()
            if not self.failed:
                self.module.exit_json()
        except Exception as exc:  # pylint: disable=broad-except
            self.result["exc"] = type(exc).__name__
            self.result["exc_msg"] = str(exc)
            self._fail("Unable to run module.", exc)

    def _modify_resource(self, attribute):
        try:
            self.session.resources.modify(
                self.module.params["name"],
                f"{attribute}",
                self.module.params[f"{attribute}"]
            )
        except Exception as exc:  # pylint: disable=broad-except
            self.result["exc"] = exc
            self.result["exc_message"] = f"Unable to modify {attribute}."
            self._fail(self.result["exc_message"])

    def _create_unix_resource(self):
        try:
            if self.session.resources.get(self.module.params["name"]):
                pass
        except ResourceDoesNotExist:
            try:
                self.session.resources.create(
                    self.module.params["name"],
                    "unixfilesystem",
                    self.module.params["location"],
                    self.module.params["vault"],
                    self.module.params["context"],
                    self.module.params["zone"],
                    "cache"
                )

                self.result["changed"] = True

            except Exception as exc:  # pylint: disable=broad-except
                self.result["exc"] = exc
                self.result["exc_message"] = "Unable to instantiate resource."
                self._fail(self.result["exc_message"])

        if self.module.params["free_space"]:
            self._modify_resource("free_space")

        if self.module.params["status"]:
            self._modify_resource("status")

        if self.module.params["context"]:
            self._modify_resource("context")

    def _fail(self, msg, err=None):
        if self.session:
            self.session.cleanup()

        self.failed = True

        if err:
            self.module.fail_json(msg=msg + "\n" + str(err), **self.result)
        else:
            self.module.fail_json(msg=msg, **self.result)


def main():
    """
    Entrypoint of the Ansible module
    """
    try:
        module = IRODSUnixResourceModule()
        module.run_module()
    except Exception:  # pylint: disable=broad-except
        pass


if __name__ == '__main__':
    main()
