#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from __future__ import absolute_import
import ssl
from ansible.module_utils.basic import AnsibleModule
from irods.session import iRODSSession
from irods.models import Resource
from irods.manager import Manager
from irods.message import GeneralAdminRequest, iRODSMessage
from irods.exception import ResourceDoesNotExist, NoResultFound, OperationNotSupported
from irods.api_number import api_number
from irods.resource import iRODSResource

DOCUMENTATION = '''
---
module: irods_unixfilesystem_resource

short_description: Create an iRODS Unix filesystem storage resource

version added: "2.11.11"

description: An ansible module for creating an iRODS Unix filesystem storage 
resource

required variables:
    name:
        description:
            - the name of the resource
        required: true
        type: str
    host:
        description:
            - the FQDN or IP address of the resource server hosting this 
            resource
        required: true
        type: str
    vault:
        description:
            - the absolute path to the root directory of the vault

optional variables:
    context:
        description:
            - any context to attach to this resource
        type: str
    status:
        description:
            - starting status 'up' or 'down'
    init_free_space:
        description:
            - whether or not to initialize freespace

author:
    - Fenn Garnett
'''


class IRODSUnixResourceModule:
    """
    Module class
    """

    def __init__(self):
        """
        Initialize the module
        """
        # define argument
        self.module_args = dict(
            name=dict(type="str", required=True),
            vault_path=dict(type="str", required=True),
            context=dict(type="str", required=False),
            status=dict(type="str", required=False),
            init_freespace=dict(type="bool", required=False),

            host=dict(type="str", required=True),
            port=dict(type="int", required=True),
            admin_user=dict(type="str", no_log=True, required=True),
            admin_password=dict(type="str", no_log=True, required=True),
            zone=dict(type="str", required=True),
        )

        # result
        self.result = dict(
            changed=False,
            response="",
            exc="",
            exc_msg=""
        )

        # init module
        self.module = AnsibleModule(
            argument_spec=self.module_args,
            supports_check_mode=True
        )

        self.ssl_context = ssl.create_default_context(
            purpose=ssl.Purpose.SERVER_AUTH, cafile=None, capath=None,
            cadata=None)

        self.ssl_settings = {"ssl_context": self.ssl_context}

        self.session = None

    def init_session(self):
        try:
            self.session = iRODSSession(
                path=self.module.params["path"],
                state=self.module.params["state"],
                parents=self.module.params["parents"],
                host=self.module.params["host"],
                port=self.module.params["port"],
                user=self.module.params["admin_user"],
                password=self.module.params["admin_password"],
                zone=self.module.params["zone"],
                **self.ssl_settings)

        except Exception as exc:
            self.result["exc"] = exc
            self.result["exc_message"] = "Unable to connect to iRODS."
            self._fail(self.result["exc_message"])

    def run_module(self):
        if self.module.check_mode:
            self.module.exit_json(**self.result)

        self.init_session()

        try:
            self.create_unix_resource()
            self.module.exit_json(**self.result)
        except Exception as exc:
            self.result["exc"] = type(exc).__name__
            self.result["exc_msg"] = str(exc)
            self._fail("Unable to move irods object/collection {}".format(
                self.module.params["source"]), exc)

    def create_unix_resource(self):
        try:
            with self.session.pool.get_connection() as conn:
                if conn.server_version < (4, 0, 0):
                    message_body = GeneralAdminRequest(
                        "add",
                        "resource",
                        "unixfilesystemresource",
                        "unixfilesystem",
                        self.module.params["host"],
                        self.module.params["path"],
                        self.module.params["zone"]
                    )
                else:
                    message_body = GeneralAdminRequest(
                        "add",
                        "resource",
                        "unixfilesystemresource",
                        "unixfilesystem",
                        self.module.params["host"] + ":" + self.module.params["path"],
                        self.module.params["context"],
                        self.module.params["zone"]
                    )

                request = iRODSMessage("RODS_API_REQ", msg=message_body,
                                        int_info=api_number['GENERAL_ADMIN_AN'])
                conn.send(request)
                self.result["response"] = conn.recv()
                self.result["changed"] = True

        except Exception as exc:
            self.result["exc"] = type(exc).__name__
            self.result["exc_msg"] = str(exc)
            self._fail("Unable to instantiate iRODS Unix File System.")

    def _fail(self, msg, err=None):
        """
        Failure routine, called when the operation failed
        """
        if self.session:
            self.session.cleanup()

        if err:
            self.module.fail_json(msg=msg + "\n" + str(err), **self.result)
        else:
            self.module.fail_json(msg=msg, **self.result)


def main():
    """
    Entrypoint of the Ansible module
    """
    try:
        module = IRODSUnixResourceModule()
        module.run_module()
    except Exception:
        pass


if __name__ == '__main__':
    main()
