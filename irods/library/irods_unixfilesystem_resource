#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Provide irods_unixfilesystem_resource Ansible module"""

from typing import Any, Optional
from ansible.module_utils.basic import AnsibleModule
from irods.exception import ResourceDoesNotExist
from irods.session import iRODSSession


DOCUMENTATION = r"""
---
module: irods_unixfilesystem_resource

short_description: Create an iRODS Unix filesystem storage resource

version added: "2.11.11"

description: >
  An ansible module for creating an iRODS Unix filesystem storage resource

options:
  name:
    description: the name of the resource
    required: true
    type: string
  location:
    description: >
      the identity of the resource server that will host this resource
    required: true
    type: str
  vault:
    description: the absolute path to the root directory of the vault
    required: true
    type: path
  context:
    description: any context to attach to this resource
    required: false
    type: str
  status:
    description: starting status 'up' or 'down'
    required: false
    type: str
  free_space:
    description: the current amount of free space in bytes
    required: false
    type: int
  host:
    description: the FQN or IP address of the iRODS server to connect to
    required: false
    default: the value of `location` will be used
    type: str
  port:
    description: port of the iRODS server
    required: true
    type: int
  admin_user:
    description: username of the admin user
    required: true
    type: str
  admin_password:
    description: password of the admin user
    required: true
    type: str
  zone:
    description: zone of the admin user
      required: true
      type: str

author: Fenn Garnett (@Fennersteel)
"""


class _IRODSError(Exception):

    def __init__(self, message: str, cause: Exception = None):
        super().__init__()
        self._message = message
        self._cause = cause

    def __str__(self) -> str:
        return self._message

    @property
    def cause(self) -> Optional[Exception]:
        """the cause of the error"""
        return self._cause


class IRODSUnixResourceModule:  # pylint: disable=too-few-public-methods
    """
    Module class
    """

    def __init__(self):
        """
        Initialize the module
        """
        module_args = dict(
            name=dict(type="str", required=True),
            location=dict(type="str", required=True),
            vault=dict(type="path", required=True),
            context=dict(type="str", required=False),
            status=dict(type="str", required=False),
            free_space=dict(type="int", required=False),
            host=dict(type="str", required=False),
            port=dict(type="int", required=True),
            admin_user=dict(type="str", no_log=True, required=True),
            admin_password=dict(type="str", no_log=True, required=True),
            zone=dict(type="str", required=True),
        )
        self._module = AnsibleModule(
            argument_spec=module_args, supports_check_mode=True
        )
        if not self._module.params["host"]:
            self._module.params["host"] = self._module.params["location"]
        self._result = dict(changed=False, response="", exc="", exc_msg="")

    def run_module(self):
        """
        Main module operative function
        """
        if self._module.check_mode:
            self._module.exit_json(**self._result)
            return
        try:
            with self._init_session() as session:
                self._ensure_resource_exists(session)
            self._module.exit_json(**self._result)
        except _IRODSError as err:
            self._fail(err)

    def _init_session(self) -> iRODSSession:
        try:
            return iRODSSession(
                host=self._module.params["host"],
                port=self._module.params["port"],
                user=self._module.params["admin_user"],
                password=self._module.params["admin_password"],
                zone=self._module.params["zone"],
            )
        except Exception as exc:  # pylint: disable=broad-except
            raise _IRODSError(
                message="unable to connect to iRODS server", cause=exc
            ) from exc

    def _ensure_resource_exists(self, session: iRODSSession):
        if not self._resource_exists(session):
            self._create_resource(session)
        else:
            self._ensure_attribute(
                session=session, attribute="type", value="unixfilesystem")
            self._ensure_attribute(
                session=session,
                attribute="location",
                value=self._module.params["location"],
            )
            self._ensure_attribute(
                session=session,
                attribute="vault_path",
                value=self._module.params["vault"],
            )
        if self._module.params["free_space"]:
            self._ensure_attribute(
                session=session,
                attribute="free_space",
                value=self._module.params["free_space"],
            )
        if self._module.params["status"]:
            self._ensure_attribute(
                session=session,
                attribute="status",
                value=self._module.params["status"],
            )
        if self._module.params["context"]:
            self._ensure_attribute(
                session=session,
                attribute="context",
                value=self._module.params["context"],
            )

    def _create_resource(self, session: iRODSSession):
        try:
            session.resources.create(
                name=self._module.params["name"],
                resource_type="unixfilesystem",
                host=self._module.params["location"],
                path=self._module.params["vault"],
            )
            self._result["changed"] = True
        except Exception as exc:  # pylint: disable=broad-except
            raise _IRODSError(
                message="unable to create resource", cause=exc
            ) from exc

    def _ensure_attribute(
        self, session: iRODSSession, attribute: str, value: Any
    ):
        try:
            current_value = getattr(
                session.resources.get(self._module.params["name"]), attribute
            )
            if not current_value or str(current_value) != str(value):
                session.resources.modify(
                    name=self._module.params["name"],
                    attribute=attribute,
                    value=value,
                )
                self._result["changed"] = True
        except Exception as exc:  # pylint: disable=broad-except
            raise _IRODSError(
                message=f"unable to modify {attribute}", cause=exc
            ) from exc

    def _resource_exists(self, session: iRODSSession) -> bool:
        try:
            session.resources.get(self._module.params["name"])
            return True
        except ResourceDoesNotExist:
            return False

    def _fail(self, err: _IRODSError):
        if err.cause:
            self._result["exc"] = type(err.cause).__name__
            self._result["exc_msg"] = str(err.cause)
        fail_msg = "\n".join(
            filter(lambda x: x != "", [str(err), self._result["exc_msg"]]))
        self._module.fail_json(msg=fail_msg, **self._result)


def main():
    """
    Entrypoint of the Ansible module
    """
    IRODSUnixResourceModule().run_module()


if __name__ == "__main__":
    main()
