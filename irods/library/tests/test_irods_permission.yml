---
- name: testing irods_permission module
  hosts: localhost
  vars:
    test_coll: /testing/home/rods/test_coll1
    test_sub_coll: "{{ test_coll }}/sub_coll1"
    test_data_obj_1: /testing/home/rods/test_obj1
    test_data_obj_2: "{{ test_sub_coll }}/test_obj2"
    zone: testing
  pre_tasks:
    - name: Initialized iRODS session
      shell: |
        set -o errexit
        if ! [[ -f "$HOME"/.irods/.irodsA ]]; then
          iinit rods > /dev/null
          echo changed
        fi
      register: response
      changed_when: response.stdout == 'changed'

    - name: Create remote zone
      shell: |
        set -o errexit
        if ! res="$(iadmin lz other_zone)"; then
          exit 1
        fi
        if [[ "$res" == 'No rows found' ]]; then
          iadmin mkzone other_zone remote
          echo changed
        fi
      register: response
      changed_when: response.stdout == 'changed'

    - name: Create test users
      shell: |
        set -o errexit
        if ! res="$(iadmin lu test_user1)"; then
          exit 1
        fi
        if [[ "$res" == 'No rows found' ]]; then
          iadmin mkuser test_user1 rodsuser
          echo changed
        fi
        if ! res="$(iadmin lu test_user2)"; then
          exit 1
        fi
        if [[ "$res" == 'No rows found' ]]; then
          iadmin mkuser test_user2 rodsuser
          echo changed
        fi
        if ! res="$(iadmin lu 'test_user3#other_zone')"; then
          exit 1
        fi
        if [[ "$res" == 'No rows found' ]]; then
          iadmin mkuser 'test_user3#other_zone' rodsuser
          echo changed
        fi
      register: response
      changed_when:
        - response.stdout_lines | length > 0
        - response.stdout_lines[0] == 'changed'

    - name: Create collections
      shell: |
        if ! ils '{{ test_sub_coll }}' &> /dev/null; then
          imkdir -p '{{ test_sub_coll }}'
          echo changed
        fi
      register: response
      changed_when: response.stdout == 'changed'

    - name: Create data objects
      shell: |
        set -o errexit
        if ! ils '{{ test_data_obj_1 }}' &> /dev/null; then
          file1=/tmp/"$(basename '{{ test_data_obj_1 }}')"
          echo data_object_1 > "$file1"
          iput -R ingestRes "$file1" '{{ test_data_obj_1 }}' >&2
          echo changed
        fi
        if ! ils '{{ test_data_obj_2 }}' &> /dev/null; then
          file2=/tmp/"$(basename '{{ test_data_obj_2 }}')"
          echo data_object_2 > "$file2"
          iput -R ingestRes "$file2" '{{ test_data_obj_2 }}' >&2
          echo changed
        fi
      register: response
      changed_when:
        - response.stdout_lines | length > 0
        - response.stdout_lines[0] == 'changed'

  tasks:
    - name: Grant test_user1 read permission on test_coll1 (non-recursive)
      irods_permission:
        subject: test_user1
        permission: read
        object: "{{ test_coll }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing

    - name: Check read permission on test_coll1
      shell: |
        set -o pipefail
        ils -A '{{ test_coll }}' \
          | grep --quiet 'test_user1#{{ zone }}:read object'
      changed_when: false

    - name: Check no read permission on test_coll1/sub_coll1
      shell: |
        set -o pipefail
        ils -A '{{ test_sub_coll }}' | grep --quiet 'test_user1#{{ zone }}'
      register: result
      failed_when: result.rc == 0
      changed_when: false

    - name: Check read permission on test_coll1
      shell: |
        set -o pipefail
        ils -A '{{ test_coll }}' \
          | grep --quiet 'test_user1#{{ zone }}:read object'
      changed_when: false

    - name: Grant test_user1 read permission on test_coll1 (recursive)
      irods_permission:
        subject: test_user1
        permission: read
        object: "{{ test_coll }}"
        recursive: true
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Check read permission on test_coll1 & test_coll1/sub_coll1
      shell: |
        set -o errexit -o pipefail
        ils -A '{{ test_coll }}' \
          | grep --quiet 'test_user1#{{ zone }}:read object'
        ils -A '{{ test_sub_coll }}' \
          | sed --quiet 2p \
          | grep --quiet 'test_user1#{{ zone }}:read object'
      changed_when: false

    - name: Grant test_user2 write permission on test_coll1
      irods_permission:
        subject: test_user2
        permission: write
        object: "{{ test_coll }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Check write permission on test_coll1
      shell: |
        set -o pipefail
        ils -A '{{ test_coll }}' \
          | grep --quiet 'test_user2#{{ zone }}:modify object'
      changed_when: false

    - name: Grant test_user1 ownership permission on test_coll1
      irods_permission:
        subject: test_user1
        permission: own
        object: "{{ test_coll }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Check ownership permission on test_coll1
      shell: |
        set -o pipefail
        ils -A '{{ test_coll }}' | grep --quiet 'test_user1#{{ zone }}:own'
      changed_when: false

    - name: Remove test_user1 permission on test_coll1
      irods_permission:
        subject: test_user1
        permission: "null"
        object: "{{ test_coll }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Check null/no permission on test_coll1
      command: ils -A '{{ test_coll }}'
      register: result
      failed_when: result.failed or "test_user1#testing:" in result.stdout
      changed_when: false

    - name: Remove test_user1 permission on test_coll1 (recursive)
      irods_permission:
        subject: test_user1
        permission: "null"
        object: "{{ test_coll }}"
        recursive: true
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Check null/no permission on test_coll1
      command: ils -A '{{ test_coll }}'
      register: result
      failed_when: result.failed or "test_user1#testing:" in result.stdout
      changed_when: false

    - name: Grant test_user1 read permission on test_obj1
      irods_permission:
        subject: test_user1
        permission: read
        object: "{{ test_data_obj_1 }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Grant test_user1 write permission on test_obj1
      irods_permission:
        subject: test_user1
        permission: write
        object: "{{ test_data_obj_1 }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Check write permission on test_obj1
      shell: |
        set -o pipefail
        ils -A '{{ test_data_obj_1 }}' \
          | grep --quiet 'test_user1#{{ zone }}:modify object'
      register: result
      changed_when: false

    - name: Grant test_user1 ownership permission on test_obj1
      irods_permission:
        subject: test_user1
        permission: own
        object: "{{ test_data_obj_1 }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Check ownership permission on test_obj1
      shell: |
        set -o pipefail
        ils -A '{{ test_data_obj_1 }}' \
          | grep --quiet 'test_user1#{{ zone }}:own'
      register: result
      changed_when: false

    - name: Remove test_user1 permission on test_obj1
      irods_permission:
        subject: test_user1
        permission: "null"
        object: "{{ test_data_obj_1 }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Check null/no permission on test_obj1
      command: ils -A '{{ test_data_obj_1 }}'
      register: result
      failed_when: result.failed or 'test_user1#testing:' in result.stdout
      changed_when: false

    - name: Grant test_user3#other_zone read permission on test_obj1
      irods_permission:
        subject: test_user3
        subject_zone: other_zone
        permission: "read"
        object: "{{ test_data_obj_1 }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: rods
        zone: testing
      register: result

    - name: Check permission on test_obj1
      shell: |
        set -o pipefail
        ils -A '{{ test_data_obj_1 }}' \
          | grep --quiet 'test_user3#other_zone:read'
      changed_when: false
