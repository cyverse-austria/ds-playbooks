#!/bin/bash
#
# Usage: sparcd-ingest ZONE ADMIN UPLOADER TARFILE
#
# ZONE is the iRODS zone. ADMIN is the Sparc'd administrator's username.
# UPLOADER is the iRODS username of the user who uploaded the TAR file to be
# processed. ADMIN and UPLOADER must belong to ZONE. TARFILE is the absolute
# path in ZONE to the TAR file that is to be processed. It's base name should
# have the form `<collection name>-<part number>.tar`.
#
# On behalf of UPLOADER, this script extracts the contents of TARFILE into a
# collection named `<collection name>` in the same parent collection as TARFILE.
# It then deletes TARFILE. After that it uses the extracted
# `meta-<part number>.csv` file to apply AVUs to the other extracted data
# objects ande deletes meta.csv. Finally, gives ADMIN own permission on the
# collection, and it assigns the ACL of the parent collection to all extracted
# collections and data objects preserving UPLOADER's own permission on
# everything extracted.
#
# This script assumes that the executor of this script is authenicated as a
# rodsadmin user.
#
# NB: Once it is confirmed that the tar file extraction logic in iRODS is 
#     robust, we should consider moving this logic back into iRODS rules.

set -o errexit -o nounset -o pipefail


main() {
	local zone="$1"
	local admin="$2"
	local uploader="$3"
	local tarFile="$4"

	local parentColl
	parentColl="$(dirname "$tarFile")"

	local tarName
	tarName="$(basename "$tarFile" .tar)"

	local coll="$parentColl"/"${tarName%-*}"
	local metaFile="$coll"/meta-"${tarName##*-}".csv

	extract "$uploader"\#"$zone" "$tarFile" "$coll"

	local rc=0

	if ! ensure_owner "$admin" "$coll"; then
		rc=$(( rc || $? ))
	fi

	if ! map_metadata  "$coll" "$metaFile"; then
		rc=$(( rc || $? ))
	fi

	if ! inherit_acl "$parentColl" "$coll" "$uploader"\#"$zone"; then
		rc=$(( rc || $? ))
	fi

	if (( rc != 0 )); then
		return $rc
	fi

	rm_metadata_file "$metaFile"

# TODO: Ask Susan if she wants to resume deleting tar files after successfully
# extracting them
# 	# TODO: Move this logic into iRODS rules
# 	if ! irm -f "$tarFile"; then
# 		local rc=$?
# 		printf 'The script failed to delete the image bundle %s.\n' "$tarFile" >&2 || true
# 		return $rc
# 	fi
}


ensure_owner() {
	local user="$1"
	local coll="$2"

	local rc=0

	local resp
	if ! resp="$(iquest '%s' "select COLL_NAME where COLL_NAME = '$coll'")"; then
		rc=$?
	else
		if [[ "$resp" == "$coll" ]]; then
			if ! ichmod -M -r own "$user" "$coll"; then
				rc=$?
			fi
		fi
	fi

	if (( rc != 0 )); then
		printf 'The script failed to ensure %s owns %s and everything in it.\n' "$user" "$coll" >&2 \
			|| true
	fi

	return $rc
}


extract() {
	local owner="$1"
	local tarFile="$2"
	local coll="$3"

	if ! clientUserName="$owner" ibun -b -x -D tar "$tarFile" "$coll"; then
		local rc=$?

		printf 'The script failed to extract the contents of the image bundle %s into %s as %s.\n' \
					"$tarFile" "$coll" "$owner" \
				>&2 \
			|| true

		return $rc
	fi
}


inherit_acl() {
	local parentColl="$1"
	local childColl="$2"
	local owner="$3"

	local rc=0

	if ! ils -A "$parentColl" | mk_acl | assign_acl "$owner" "$childColl"; then	
		rc=$?
		printf 'The script failed to assign the permission on the parent collection to %s.\n' \
					"$childColl" \
				>&2 \
			|| true
	fi

	return $rc
}


map_metadata() {
	local parentColl="$1"
	local metaFile="$2"

	local rc=0

# XXX: This doesn't work in iRODS 4.2.8. See
# https://github.com/irods/irods/issues/5518
# 	if ! iget "$metaFile" - | mk_imeta_cmds "$parentColl" | imeta > /dev/null 2>&1; then
	local metaEntries
	if ! IFS=$'\n' readarray -t metaEntries < <(iget "$metaFile" -); then
		rc=$?
	else
		local entry
		for entry in "${metaEntries[@]}"; do
			local fields
			IFS=, read -r -a fields <<< "$entry"

			# if $entry ended in a ",", i.e., the unit of the last AVU was empty, read
			# will create an array entry for the empty AVU, so we need to do this.
			if [[ "$entry" =~ ,$ ]]; then
				fields[${#fields[@]}]=''
			fi

			local obj="${fields[0]}"

			local idx
			for (( idx=1; idx < ${#fields[@]}; idx+=3 )); do
				local attr="${fields[$(( idx + 0 ))]}"
				local val="${fields[$(( idx + 1 ))]}"
				local units="${fields[$(( idx + 2 ))]}"
				if ! imeta adda -d "$parentColl"/"$obj" "$attr" "$val" "$units"; then
					rc=$(( rc || $? ))
				fi
			done
		done
	fi

	if (( rc != 0 )); then
# 		rc=$?
#	
# XXX: ^^^
		printf 'The script failed to add all metadata from %s to files in %s.\n' "$metaFile" "$coll" \
				>&2 \
			|| true
	fi

	return $rc
}


rm_metadata_file() {
	local file="$1"

	if ! irm -f "$file"; then
		local rc=$?
		printf 'The script failed to delete the metadata file %s.\n' "$file" >&2 || true
		return $rc
	fi
}


assign_acl() {
	local uploader="$1"
	local entity="$2"

	local user perm
	while IFS=: read -r -d ' ' user perm; do
		if [[ "$user" != "$uploader" ]]; then
			ichmod -M -r "$perm" "$user" "$entity"
		fi
	done
}


# Converts the an ACL list in the format ils -A generates into something useable
# by ichmod.
#
# In other words, it converts
#
#/zone/path/to/entity:
#       ACL - writer#zone:modify object   owner#zone:own   g:group#zone:own   reader#zone:read object
#       Inheritance - Disabled
# ...
#
# into
#
#writer#zone:write owner#zone:own group#zone:own reader#zone:read
#
mk_acl() {
	sed --quiet --file - <(cat) <<'SED_SCRIPT'
2 {
	s/ g:/ /g
	s/read object/read/g
	s/modify object/write/g
	s/  */ /g
	s/^ ACL - //
	p
}
SED_SCRIPT
}


mk_imeta_cmds() {
	local parentColl="$1"

	while IFS=, read -r -a fields; do
		local idx
		for (( idx=1; idx < ${#fields[@]}; idx+=3 )); do
			printf 'adda -d "%s/%s" "%s" "%s" "%s"\n' \
				"$parentColl" "${fields[0]}" "${fields[@]:$idx:3}"
		done
	done

	printf 'quit\n'
}


main "$@" >&2
