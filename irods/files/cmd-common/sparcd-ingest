#!/bin/bash
#
# Usage: sparcd-ingest ZONE ADMIN UPLOADER TARFILE
#
# ZONE is the iRODS zone. ADMIN is the Sparc'd administrator's username.
# UPLOADER is the iRODS username of the user who uploaded the TAR file to be
# processed. ADMIN and UPLOADER must belong to ZONE. TARFILE is the absolute
# path in ZONE to the TAR file that is to be processed. It's base name should
# have the form `<collection name>-<part number>.tar`.
#
# On behalf of UPLOADER, this script extracts the contents of TARFILE into a
# collection named `<collection name>` in the same parent collection as TARFILE.
# It then deletes TARFILE. After that it uses the extracted
# `meta-<part number>.csv` file to apply AVUs to the other extracted data
# objects ande deletes meta.csv. Finally, gives ADMIN own permission on the
# collection, and it assigns the ACL of the parent collection to all extracted
# collections and data objects preserving UPLOADER's own permission on
# everything extracted.
#
# This script assumes that the executor of this script is authenicated as a
# rodsadmin user. Also, the script uses the file 
# `/tmp/sparcd-ingest-locks-<collection name>` as a lock file to ensure only
# one process at at time modifies permissions on `<collection name>`.
#
# NB: Once it is confirmed that the tar file extraction logic in iRODS is 
#     robust, we should consider moving this logic back into iRODS rules.

set -o errexit -o nounset -o pipefail

readonly LOCK_FILE_BASE=/tmp/sparcd-ingest-locks


main() {
	local zone="$1"
	local admin="$2"
	local uploader="$3"
	local tarFile="$4"

	local parentColl
	parentColl="$(dirname "$tarFile")"

	local tarName
	tarName="$(basename "$tarFile" .tar)"

	local coll="$parentColl"/"${tarName%-*}"
	local metaFile="$coll"/meta-"${tarName##*-}".csv

	extract "$uploader" "$tarFile" "$coll"

	local rc=0
	
	ensure_owner "$admin" "$coll" || rc=$(( rc || $? ))
	map_metadata "$coll" "$metaFile" || rc=$(( rc || $? ))
	inherit_acl "$zone" "$parentColl" "$coll" "$uploader" || rc=$(( rc || $? ))

	if (( rc != 0 )); then
		return $rc
	fi

	rm_metadata_file "$metaFile"

# TODO: Ask Susan if she wants to resume deleting tar files after successfully
# extracting them
# 	# TODO: Move this logic into iRODS rules
# 	irm -f "$tarFile" || rc=$(( rc || $? ))
# 	if (( rc != 0 )); then
# 		printf 'The script failed to delete the image bundle %s.\n' "$tarFile" >&2 || true
# 		return $rc
# 	fi
}


ensure_owner() {
	local user="$1"
	local coll="$2"

	local rc=0

	local resp
	resp="$(iquest '%s' "select COLL_NAME where COLL_NAME = '$coll'")" || rc=$?
	if (( rc == 0 )) && [[ "$resp" == "$coll" ]]; then
		ichmod -M -r own "$user" "$coll" || rc=$(( rc || $? ))
	fi

	if (( rc != 0 )); then
		printf 'The script failed to ensure %s owns %s and everything in it.\n' "$user" "$coll" >&2 \
			|| true
	fi

	return $rc
}


extract() {
	local owner="$1"
	local tarFile="$2"
	local coll="$3"

	local rc=0
	clientUserName="$owner" ibun -b -x -f -D tar "$tarFile" "$coll" || rc=$?
	if (( rc != 0 )); then
		printf 'The script failed to extract the contents of the image bundle %s into %s as %s.\n' \
					"$tarFile" "$coll" "$owner" \
				>&2 \
			|| true
	fi

	return $rc
}


inherit_acl() {
	local zone="$1"
	local parentColl="$2"
	local childColl="$3"
	local owner="$4"

	local rc=0
	ils -A "$parentColl" | mk_acl | assign_acl "$zone" "$owner" "$childColl" || rc=$?
	if (( rc != 0 )); then	
		printf 'The script failed to assign the permission on the parent collection to %s.\n' \
					"$childColl" \
				>&2 \
			|| true
	fi

	return $rc
}


map_metadata() {
	local parentColl="$1"
	local metaFile="$2"

# XXX: This doesn't work in iRODS 4.2.8. See
# https://github.com/irods/irods/issues/5518
# 	if ! iget "$metaFile" - | mk_imeta_cmds "$parentColl" | imeta > /dev/null 2>&1; then
# 		printf 'The script failed to add all metadata from %s to files in %s.\n' \
# 					"$metaFile" "$parentColl" \
# 				>&2 \
# 			|| true
# 		return 1
# 	fi
	if ! iget "$metaFile" - | apply_metadata "$parentColl"; then
		printf 'The script failed to add all metadata from %s to files in %s.\n' \
					"$metaFile" "$parentColl" \
				>&2 \
			|| true
		return 1
	fi
}
apply_metadata() {
	local parentColl="$1"

	local rc=0

	local metaEntries
	IFS=$'\n' readarray -t metaEntries
	if [[ -n "${metaEntries-}" ]]; then
		local entry
		for entry in "${metaEntries[@]}"; do
			local fields
			IFS=, read -r -a fields <<< "$entry"

			# if $entry ended in a ",", i.e., the unit of the last AVU was empty, read
			# will create an array entry for the empty AVU, so we need to do this.
			if [[ "$entry" =~ ,$ ]]; then
				fields[${#fields[@]}]=''
			fi

			local obj="${fields[0]}"

			local idx
			for (( idx=1; idx < ${#fields[@]}; idx+=3 )); do
				local attr="${fields[$(( idx + 0 ))]}"
				local val="${fields[$(( idx + 1 ))]}"
				local units="${fields[$(( idx + 2 ))]}"
				add_metadatum "$parentColl"/"$obj" "$attr" "$val" "$units" || rc=$(( rc || $? ))
			done
		done
	fi

	return $rc
# XXX: ^^^
}


rm_metadata_file() {
	local file="$1"

	local rc=0
	irm -f "$file" || rc=$?
	if (( rc != 0 )); then
		printf 'The script failed to delete the metadata file %s.\n' "$file" >&2 || true
	fi

	return $rc
}


assign_acl() {
	local zone="$1"
	local uploader="$2"
	local entity="$3"

	local rc=0

	local lockFile
	lockFile="$LOCK_FILE_BASE"-"$(basename "$entity")"

	local userAndZone perm
	while IFS=: read -r -d ' ' userAndZone perm; do
		if [[ "$userAndZone" != "$uploader#$zone" ]]; then
			flock "$lockFile" ichmod -M -r "$perm" "$userAndZone" "$entity" || rc=$(( rc || $? ))
		fi
	done

	return $rc
}


# Converts the an ACL list in the format ils -A generates into something useable
# by ichmod.
#
# In other words, it converts
#
# /zone1/path/to/entity:
#        ACL - writer#zone1:modify object   owner#zone1:own   g:group#zone1:own   reader#zone2:read object
#        Inheritance - Disabled
# ...
#
# into
#
# writer#zone1:write owner#zone1:own group#zone1:own reader#zone2:read
# ...
#
mk_acl() {
	sed --quiet --file - <(cat) <<'SED_SCRIPT'
2 {
	s/ g:/ /g
	s/read object/read/g
	s/modify object/write/g
	s/  */ /g
	s/^ ACL - //
	p
}
SED_SCRIPT
}


add_metadatum() {
	local obj="$1"
	local attr="$2"
	local val="$3"
	local units="$4"

	local rc=0

	local resp
	resp="$(imeta adda -d "$obj" "$attr" "$val" "$units 2>&1)" || rc=$?
	if (( rc != 0 )) && ! [[ "$resp" =~ -809000 CATALOG_ALREADY_HAS_ITEM_BY_THAT_NAME ]]; then
		echo "$resp" &>2
		return $rc
	else
		return 0
	fi
}


mk_imeta_cmds() {
	local parentColl="$1"

	while IFS=, read -r -a fields; do
		local idx
		for (( idx=1; idx < ${#fields[@]}; idx+=3 )); do
			printf 'adda -d "%s/%s" "%s" "%s" "%s"\n' \
				"$parentColl" "${fields[0]}" "${fields[@]:$idx:3}"
		done
	done

	printf 'quit\n'
}


main "$@" >&2
